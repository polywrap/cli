# generated by datamodel-codegen:
#   filename:  0.1.0.json
#   timestamp: 2022-09-21T13:12:40+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Extra, Field, constr


class Format(Enum):
    field_0_1_0 = '0.1.0'
    field_0_1 = '0.1'


class ClientConfig(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Step(BaseModel):
    class Config:
        extra = Extra.forbid

    uri: str = Field(..., description='Wrapper URI')
    method: constr(regex=r'^[a-zA-Z0-9\\-\\_]+$') = Field(
        ..., description='Wrapper method name'
    )
    args: Optional[Dict[str, Any]] = Field(None, description='Wrapper method arguments')
    config: Optional[ClientConfig] = None


class Jobs(BaseModel):
    pass


class Model(BaseModel):
    class Config:
        extra = Extra.forbid

    format: Format = Field(..., description='Workflow format version')
    name: constr(regex=r'^[a-zA-Z0-9\\-\\_]+$') = Field(
        ..., description='Workflow name'
    )
    validation: Optional[str] = Field(None, description='Path to validation script')
    jobs: Jobs


class JobInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    steps: Optional[List[Step]] = Field(None, description='Array of calls to wrappers')
    jobs: Optional[Jobs] = None
