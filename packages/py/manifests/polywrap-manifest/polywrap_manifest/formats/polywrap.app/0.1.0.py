# generated by datamodel-codegen:
#   filename:  0.1.0.json
#   timestamp: 2022-09-21T13:12:40+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Extra, Field, constr


class Format(Enum):
    field_0_1_0 = '0.1.0'
    field_0_1 = '0.1'


class ImportRedirect(BaseModel):
    class Config:
        extra = Extra.forbid

    uri: constr(regex=r'^[wrap://]*[a-z\\-\\_0-9]+\\/.+$') = Field(
        ..., description='Import URI to be redirected.'
    )
    schema_: constr(
        regex=r'^\\.?\\.?\\/?((\\/[\\w\\-\\.]+|\\/\\.\\.|\\/\\.)+\\/)?[\\w\\-\\.]+\\.graphql$'
    ) = Field(
        ...,
        alias='schema',
        description='Path to a graphql schema to be used for the import.',
    )


class Model(BaseModel):
    class Config:
        extra = Extra.forbid

    format: Format = Field(..., description='Polywrap app manifest format version.')
    name: constr(regex=r'^[a-zA-Z0-9\\-\\_]+$') = Field(
        ..., description='Name of this wrapper package.'
    )
    language: constr(regex=r'^app\\/[a-z0-9]+$') = Field(
        ..., description='Language in which the source code is written.'
    )
    schema_: constr(
        regex=r'^\\.?\\.?\\/?((\\/[\\w\\-\\.]+|\\/\\.\\.|\\/\\.)+\\/)?[\\w\\-\\.]+\\.?[\\w\\-\\.]*$'
    ) = Field(..., alias='schema', description='Path to graphql schema.')
    import_redirects: Optional[List[ImportRedirect]] = Field(
        None, description="Redirects for the schema's imports."
    )
