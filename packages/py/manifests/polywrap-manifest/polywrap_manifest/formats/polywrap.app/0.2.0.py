# generated by datamodel-codegen:
#   filename:  0.2.0.json
#   timestamp: 2022-09-21T13:12:40+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Extra, Field, constr


class Format(Enum):
    field_0_2_0 = '0.2.0'


class Project(BaseModel):
    class Config:
        extra = Extra.forbid

    name: constr(regex=r'^[a-zA-Z0-9\\-\\_]+$') = Field(
        ..., description='Name of this project.'
    )
    type: constr(regex=r'^app\\/[a-z0-9]+$') = Field(
        ..., description='Type of this project.'
    )


class Extensions(BaseModel):
    class Config:
        extra = Extra.forbid

    build: Optional[
        constr(
            regex=r'^\\.?\\.?(\\/[\\w\\-\\.]+|\\/\\.\\.|\\/\\.)*\\/[\\w\\-\\.]+\\.(yaml|json)$'
        )
    ] = Field(None, description='Path to the project build manifest file.')
    meta: Optional[
        constr(
            regex=r'^\\.?\\.?(\\/[\\w\\-\\.]+|\\/\\.\\.|\\/\\.)*\\/[\\w\\-\\.]+\\.(yaml|json)$'
        )
    ] = Field(None, description='Path to project metadata manifest file.')
    deploy: Optional[
        constr(
            regex=r'^\\.?\\.?(\\/[\\w\\-\\.]+|\\/\\.\\.|\\/\\.)*\\/[\\w\\-\\.]+\\.(yaml|json)$'
        )
    ] = Field(None, description='Path to project deploy manifest file.')
    infra: Optional[
        constr(
            regex=r'^\\.?\\.?(\\/[\\w\\-\\.]+|\\/\\.\\.|\\/\\.)*\\/[\\w\\-\\.]+\\.(yaml|json)$'
        )
    ] = Field(None, description='Path to project infra manifest file.')


class ImportAbis(BaseModel):
    class Config:
        extra = Extra.forbid

    uri: constr(regex=r'^[wrap://]*[a-z\\-\\_0-9]+\\/.+$') = Field(
        ..., description="One of the schema's import URI."
    )
    abi: constr(
        regex=r'^\\.?\\.?\\/?((\\/[\\w\\-\\.]+|\\/\\.\\.|\\/\\.)+\\/)?[\\w\\-\\.]+\\.(info|graphql|json|yaml)$'
    ) = Field(
        ...,
        description='Path to a local ABI (or schema). Supported file formats: [*.graphql, *.info, *.json, *.yaml]',
    )


class Source(BaseModel):
    class Config:
        extra = Extra.forbid

    schema_: constr(
        regex=r'^\\.?\\.?\\/?((\\/[\\w\\-\\.]+|\\/\\.\\.|\\/\\.)+\\/)?[\\w\\-\\.]+\\.graphql$'
    ) = Field(..., alias='schema', description="Path to the project's graphql schema.")
    import_abis: Optional[List[ImportAbis]] = Field(
        None,
        description='Specify ABIs to be used for the import URIs within your schema.',
    )


class Model(BaseModel):
    class Config:
        extra = Extra.forbid

    format: Format = Field(..., description='Polywrap manifest format version.')
    project: Project = Field(..., description='Basic project properties.')
    source: Source = Field(..., description='Project source files.')
    extensions: Optional[Extensions] = Field(
        None, description='Project extension files (build, meta, deploy, infra).'
    )
