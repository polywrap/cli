# generated by datamodel-codegen:
#   filename:  0.1.0.json
#   timestamp: 2022-09-21T13:12:40+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, Optional, Union

from pydantic import BaseModel, Extra, Field, constr


class Format(Enum):
    field_0_1_0 = '0.1.0'
    field_0_1 = '0.1'


class RemoteModule(BaseModel):
    class Config:
        extra = Extra.forbid

    package: str = Field(..., description='Package name.')
    registry: str = Field(..., description='Package registry name.')
    version: str = Field(..., description='Package version.')
    dockerComposePath: Optional[str] = Field(
        None, description='Path to docker-compose file in the package directory.'
    )


class LocalModule(BaseModel):
    class Config:
        extra = Extra.forbid

    path: str = Field(..., description='Path to the package.')


class DefaultModule(BaseModel):
    __root__: str = Field(..., description='A module available by default.')


class Model(BaseModel):
    class Config:
        extra = Extra.forbid

    format: Format = Field(..., description='Polywrap infra manifest format version.')
    dockerCompose: Optional[str] = Field(
        None, description='Path to docker compose manifest.'
    )
    env: Optional[Dict[constr(regex=r'^.*$'), Union[str, float]]] = None
    modules: Dict[
        constr(regex=r'^.*$'), Union[RemoteModule, LocalModule, DefaultModule]
    ]
