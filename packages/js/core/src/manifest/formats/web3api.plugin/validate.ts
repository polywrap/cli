/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/validate-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/validate-ts.mustache,
 * and run node ./scripts/manifest/generateFormatTypes.js to regenerate this file.
 */
import {
  AnyPluginManifest,
  PluginManifestFormats
} from ".";
import * as Validators from "../../validators";

import schema_0_0_1_prealpha_1 from "@web3api/manifest-schemas/formats/web3api.plugin/0.0.1-prealpha.1.json";
import { Tracer } from "@web3api/tracing-js"

import {
  Schema,
  Validator,
  ValidationError,
  ValidatorResult
} from "jsonschema";

type PluginManifestSchemas = {
  [key in PluginManifestFormats]: Schema | undefined
};

const schemas: PluginManifestSchemas = {
  "0.0.1-prealpha.1": schema_0_0_1_prealpha_1,
};

const validator = new Validator();

Validator.prototype.customFormats.pluginLanguage = Validators.pluginLanguage;
Validator.prototype.customFormats.file = Validators.file;

export const validatePluginManifest = Tracer.traceFunc(
  "core: validatePluginManifest",
  (
    manifest: AnyPluginManifest,
    extSchema: Schema | undefined = undefined
  ): void => {
    const schema = schemas[manifest.format as PluginManifestFormats];

    if (!schema) {
      throw Error(`Unrecognized PluginManifest schema format "${manifest.format}"`);
    }

    const throwIfErrors = (result: ValidatorResult) => {
      if (result.errors.length) {
        throw new Error([
          `Validation errors encountered while sanitizing PluginManifest format ${manifest.format}`,
          ...result.errors.map((error: ValidationError) => error.toString())
        ].join("\n"));
      }
    };

    throwIfErrors(validator.validate(manifest, schema));

    if (extSchema) {
      throwIfErrors(validator.validate(manifest, extSchema));
    }
  }
);
