### Polywrap Header START ###
scalar UInt
scalar UInt8
scalar UInt16
scalar UInt32
scalar Int
scalar Int8
scalar Int16
scalar Int32
scalar Bytes
scalar BigInt
scalar BigNumber
scalar JSON
scalar Map

directive @imported(
    uri: String!
    namespace: String!
    nativeType: String!
) on OBJECT | ENUM

directive @imports(
    types: [String!]!
) on OBJECT

directive @capability(
    type: String!
    uri: String!
    namespace: String!
) repeatable on OBJECT

directive @enabled_interface on OBJECT

directive @annotate(type: String!) on FIELD

### Polywrap Header END ###

type Module @imports(
    types: [
        "Ethereum_Module",
        "Ethereum_Connection",
        "Ethereum_TxOverrides",
        "Ethereum_StaticTxResult",
        "Ethereum_TxRequest",
        "Ethereum_TxReceipt",
        "Ethereum_Log",
        "Ethereum_EventNotification",
        "Ethereum_Network",
        "Ethereum_TxResponse",
        "Ethereum_Access"
    ]
) {
    getData(
        address: String!
        connection: Ethereum_Connection
    ): Int!

    tryGetData(
        address: String!
        connection: Ethereum_Connection
    ): String!

    throwGetData(
        address: String!
        connection: Ethereum_Connection
    ): String!

    setData(
        address: String!
        value: Int!
        connection: Ethereum_Connection
    ): String!

    deployContract(
        connection: Ethereum_Connection
    ): String!
}

### Imported Modules START ###

type Ethereum_Module @imported(
    uri: "wrap://ens/wraps.eth:ethereum@1.1.0",
    namespace: "Ethereum",
    nativeType: "Module"
) {
    callContractView(
        address: String!
        method: String!
        args: [String!]
        connection: Ethereum_Connection
    ): String!

    callContractStatic(
        address: String!
        method: String!
        args: [String!]
        connection: Ethereum_Connection
        txOverrides: Ethereum_TxOverrides
    ): Ethereum_StaticTxResult!

    getBalance(
        address: String!
        blockTag: BigInt
        connection: Ethereum_Connection
    ): BigInt!

    encodeParams(
        types: [String!]!
        values: [String!]!
    ): String!

    encodeFunction(
        method: String!
        args: [String!]
    ): String!

    solidityPack(
        types: [String!]!
        values: [String!]!
    ): String!

    solidityKeccak256(
        types: [String!]!
        values: [String!]!
    ): String!

    soliditySha256(
        types: [String!]!
        values: [String!]!
    ): String!

    getSignerAddress(
        connection: Ethereum_Connection
    ): String!

    getSignerBalance(
        blockTag: BigInt
        connection: Ethereum_Connection
    ): BigInt!

    getSignerTransactionCount(
        blockTag: BigInt
        connection: Ethereum_Connection
    ): BigInt!

    getGasPrice(
        connection: Ethereum_Connection
    ): BigInt!

    estimateTransactionGas(
        tx: Ethereum_TxRequest!
        connection: Ethereum_Connection
    ): BigInt!

    estimateContractCallGas(
        address: String!
        method: String!
        args: [String!]
        connection: Ethereum_Connection
        txOverrides: Ethereum_TxOverrides
    ): BigInt!

    checkAddress(
        address: String!
    ): Boolean!

    toWei(
        eth: String!
    ): BigInt!

    toEth(
        wei: BigInt!
    ): String!

    awaitTransaction(
        txHash: String!
        confirmations: UInt32!
        timeout: UInt32!
        connection: Ethereum_Connection
    ): Ethereum_TxReceipt!

    waitForEvent(
        address: String!
        event: String!
        args: [String!]
        timeout: UInt32
        connection: Ethereum_Connection
    ): Ethereum_EventNotification!

    getNetwork(
        connection: Ethereum_Connection
    ): Ethereum_Network!

    callContractMethod(
        address: String!
        method: String!
        args: [String!]
        connection: Ethereum_Connection
        txOverrides: Ethereum_TxOverrides
    ): Ethereum_TxResponse!

    callContractMethodAndWait(
        address: String!
        method: String!
        args: [String!]
        connection: Ethereum_Connection
        txOverrides: Ethereum_TxOverrides
    ): Ethereum_TxReceipt!

    sendTransaction(
        tx: Ethereum_TxRequest!
        connection: Ethereum_Connection
    ): Ethereum_TxResponse!

    sendTransactionAndWait(
        tx: Ethereum_TxRequest!
        connection: Ethereum_Connection
    ): Ethereum_TxReceipt!

    deployContract(
        abi: String!
        bytecode: String!
        args: [String!]
        connection: Ethereum_Connection
    ): String!

    signMessage(
        message: String!
        connection: Ethereum_Connection
    ): String!

    sendRPC(
        method: String!
        params: [String!]!
        connection: Ethereum_Connection
    ): String
}

### Imported Modules END ###

### Imported Objects START ###

type Ethereum_Connection @imported(
    uri: "wrap://ens/wraps.eth:ethereum@1.1.0",
    namespace: "Ethereum",
    nativeType: "Connection"
) {
    node: String
    networkNameOrChainId: String
}

type Ethereum_TxOverrides @imported(
    uri: "wrap://ens/wraps.eth:ethereum@1.1.0",
    namespace: "Ethereum",
    nativeType: "TxOverrides"
) {
    gasLimit: BigInt
    gasPrice: BigInt
    value: BigInt
}

type Ethereum_StaticTxResult @imported(
    uri: "wrap://ens/wraps.eth:ethereum@1.1.0",
    namespace: "Ethereum",
    nativeType: "StaticTxResult"
) {
    result: String!
    error: Boolean!
}

type Ethereum_TxRequest @imported(
    uri: "wrap://ens/wraps.eth:ethereum@1.1.0",
    namespace: "Ethereum",
    nativeType: "TxRequest"
) {
    to: String
    from: String
    nonce: UInt32
    gasLimit: BigInt
    gasPrice: BigInt
    data: String
    value: BigInt
    chainId: BigInt
    type: UInt32
}

type Ethereum_TxReceipt @imported(
    uri: "wrap://ens/wraps.eth:ethereum@1.1.0",
    namespace: "Ethereum",
    nativeType: "TxReceipt"
) {
    to: String!
    from: String!
    contractAddress: String!
    transactionIndex: UInt32!
    root: String
    gasUsed: BigInt!
    logsBloom: String!
    transactionHash: String!
    logs: [Ethereum_Log!]!
    blockNumber: BigInt!
    blockHash: String!
    confirmations: UInt32!
    cumulativeGasUsed: BigInt!
    effectiveGasPrice: BigInt!
    byzantium: Boolean!
    type: UInt32!
    status: UInt32
}

type Ethereum_Log @imported(
    uri: "wrap://ens/wraps.eth:ethereum@1.1.0",
    namespace: "Ethereum",
    nativeType: "Log"
) {
    blockNumber: BigInt!
    blockHash: String!
    transactionIndex: UInt32!
    removed: Boolean!
    address: String!
    data: String!
    topics: [String!]!
    transactionHash: String!
    logIndex: UInt32!
}

type Ethereum_EventNotification @imported(
    uri: "wrap://ens/wraps.eth:ethereum@1.1.0",
    namespace: "Ethereum",
    nativeType: "EventNotification"
) {
    data: String!
    address: String!
    log: Ethereum_Log!
}

type Ethereum_Network @imported(
    uri: "wrap://ens/wraps.eth:ethereum@1.1.0",
    namespace: "Ethereum",
    nativeType: "Network"
) {
    name: String!
    chainId: BigInt!
    ensAddress: String
}

type Ethereum_TxResponse @imported(
    uri: "wrap://ens/wraps.eth:ethereum@1.1.0",
    namespace: "Ethereum",
    nativeType: "TxResponse"
) {
    hash: String!
    to: String
    from: String!
    nonce: UInt32!
    gasLimit: BigInt!
    gasPrice: BigInt
    data: String!
    value: BigInt!
    chainId: BigInt!
    blockNumber: BigInt
    blockHash: String
    timestamp: UInt32
    confirmations: UInt32!
    raw: String
    r: String
    s: String
    v: UInt32
    type: UInt32
    accessList: [Ethereum_Access!]
}

type Ethereum_Access @imported(
    uri: "wrap://ens/wraps.eth:ethereum@1.1.0",
    namespace: "Ethereum",
    nativeType: "Access"
) {
    address: String!
    storageKeys: [String!]!
}

### Imported Objects END ###
