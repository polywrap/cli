type Header {
  key: String!
  value: String!
}

type UrlParam {
  key: String!
  value: String!
}

type Response {
  status: UInt64
  statusText: String
  headers: [Header!]
  body: String
  error: ResponseError
}

type ResponseError {
  errorMessage: String!
  errorCode: String!
  timeoutExcided: Bool!
}

type Request {
  headers: [Header!]
  urlParams: [UrlParam!]
  responseType: ResponseType!
  body: Body
  timeout: UInt64
}

enum ResponseType {
  TEXT
  BINARY
}

type Body {
  stringBody: String
  rawBody: Bytes
  formDataBody: FormData
}

type FormData {
  data: [FormDataEntry!]
}

type FormDataEntry {
  key: String!
  data: String
  opts: FormDataOptions
}

type FormDataOptions {
  contentType: String
  fileName: String
  filePath: String
}

type Query {
  get(url: String!, request: Request): Response
}

type Mutation {
  post(url: String!, request: Request): Response
}
