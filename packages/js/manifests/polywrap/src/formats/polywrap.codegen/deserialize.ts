/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/deserialize-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/deserialize-ts.mustache,
 * and run node ./scripts/manifest/generateFormatTypes.js to regenerate this file.
 */

import {
  CodegenManifest,
  AnyCodegenManifest,
  migrateCodegenManifest,
  validateCodegenManifest,
  latestCodegenManifestFormat,
} from ".";
import { DeserializeManifestOptions } from "../../";

import * as Semver from "semver";
import YAML from "js-yaml";

export function deserializeCodegenManifest(
  manifest: string,
  options?: DeserializeManifestOptions
): CodegenManifest {
  let anyCodegenManifest: AnyCodegenManifest | undefined;
  try {
    anyCodegenManifest = JSON.parse(manifest) as AnyCodegenManifest;
  } catch (e) {
    anyCodegenManifest = YAML.safeLoad(manifest) as
    | AnyCodegenManifest
    | undefined;
  }

  if (!anyCodegenManifest) {
    throw Error(`Unable to parse CodegenManifest: ${manifest}`);
  }

  if (!options || !options.noValidate) {
    validateCodegenManifest(anyCodegenManifest, options?.extSchema);
  }

  anyCodegenManifest.__type = "CodegenManifest";

  const versionCompare = Semver.compare(
    Semver.coerce(anyCodegenManifest.format) || anyCodegenManifest.format,
    Semver.coerce(latestCodegenManifestFormat) || latestCodegenManifestFormat
  );

  if (versionCompare === -1) {
    // Upgrade
    return migrateCodegenManifest(anyCodegenManifest, latestCodegenManifestFormat);
  } else if (versionCompare === 1) {
    // Downgrade
    throw Error(
      `Cannot downgrade Polywrap version ${anyCodegenManifest.format}, please upgrade your PolywrapClient package.`
    );
  } else {
    // Latest
    return anyCodegenManifest as CodegenManifest;
  }
}
