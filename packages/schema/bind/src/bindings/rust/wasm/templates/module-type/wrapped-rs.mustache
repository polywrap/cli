{{#moduleType}}
{{#methods.length}}

use crate::{
    {{#methods}}
    {{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}},
    Args{{#toUpper}}{{name}}{{/toUpper}},
    deserialize_{{#toLower}}{{name}}{{/toLower}}_args,
    serialize_{{#toLower}}{{name}}{{/toLower}}_result{{^last}},{{/last}}
    {{/methods}}
};
{{/methods.length}}
{{/moduleType}}

{{#moduleType}}
{{#methods}}
pub fn {{#toLower}}{{name}}{{/toLower}}_wrapped(args: &[u8]) -> Vec<u8> {
    {{#arguments.length}}
    match deserialize_{{#toLower}}{{name}}{{/toLower}}_args(args) {
        Ok(args) => {
    {{/arguments.length}}
            let result = {{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}(Args{{#toUpper}}{{name}}{{/toUpper}} {
                {{#arguments}}
                {{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}: args.{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}},
                {{/arguments}}
            });
            serialize_{{#toLower}}{{name}}{{/toLower}}_result({{#return}}&{{/return}}result).unwrap()
    {{#arguments.length}}
        }
        Err(e) => {
            panic!("{}", e.to_string())
        }
    }
    {{/arguments.length}}
}
{{^last}}

{{/last}}
{{/methods}}
{{/moduleType}}