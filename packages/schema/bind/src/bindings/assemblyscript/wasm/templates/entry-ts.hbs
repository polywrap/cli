import {
  wrap_invoke_args,
  wrap_invoke,
  wrap_abort,
  InvokeArgs
} from "@polywrap/wasm-as";

{{#if functions.length}}
import {
  {{#each functions}}
    {{name}}Wrapped{{#unless @last}},{{/unless}}
  {{/each}}
} from "./{{type}}/wrapped";
{{/if}}

export function _wrap_invoke(method_size: u32, args_size: u32): bool {
  const args: InvokeArgs = wrap_invoke_args(
    method_size,
    args_size
  );

  {{#each functions}}
    {{#unless @first}}else {{/unless}}if (args.method == "{{name}}") {
      return wrap_invoke(args, {{name}}Wrapped);
    }
  {{/each}}

  return wrap_invoke(args, null);
}

export function wrapAbort(
  msg: string | null,
  file: string | null,
  line: u32,
  column: u32
): void {
  wrap_abort(
    msg ? msg : "",
    file ? file : "",
    line,
    column
  );
}