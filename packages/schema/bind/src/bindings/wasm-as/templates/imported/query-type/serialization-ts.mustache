{{^__commonImport}}
{{#methods.length}}
import {
  Nullable,
  Write,
  WriteSizer,
  WriteEncoder,
  ReadDecoder,
  BigInt,
  JSON,
  Context
} from "@web3api/wasm-as";
import * as Types from "../..";

{{#methods}}
export class Input_{{name}} {
  {{#arguments}}
  {{name}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}};
  {{/arguments}}
}

export function serialize{{name}}Args(input: Input_{{name}}): ArrayBuffer {
  const sizerContext: Context = new Context("Serializing (sizing) imported query-type: {{name}}");
  const sizer = new WriteSizer(sizerContext);
  write{{name}}Args(sizer, input);
  const buffer = new ArrayBuffer(sizer.length);
  const encoderContext: Context = new Context("Serializing (encoding) imported query-type: {{name}}");
  const encoder = new WriteEncoder(buffer, encoderContext);
  write{{name}}Args(encoder, input);
  return buffer;
}

export function write{{name}}Args(
  writer: Write,
  input: Input_{{name}}
): void {
  writer.writeMapLength({{arguments.length}});
  {{#arguments}}
  writer.context().push("{{name}}", "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "writing property");
  writer.writeString("{{name}}");
  {{#scalar}}
  writer.write{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}(input.{{name}});
  {{/scalar}}
  {{#array}}
  writer.write{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}(input.{{name}}, (writer: Write, item: {{#item}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/item}}): void => {
    {{> serialize_array}}
  });
  {{/array}}
  {{#enum}}
  {{#required}}
  writer.writeInt32(input.{{name}});
  {{/required}}
  {{^required}}
  writer.writeNullableInt32(input.{{name}});
  {{/required}}
  {{/enum}}
  {{#object}}
  {{#required}}
  Types.{{type}}.write(writer, input.{{name}});
  {{/required}}
  {{^required}}
  if (input.{{name}}) {
    Types.{{type}}.write(writer, input.{{name}} as Types.{{type}});
  } else {
    writer.writeNil();
  }
  {{/required}}
  {{/object}}
  writer.context().pop();
  {{/arguments}}
}

export function deserialize{{name}}Result(buffer: ArrayBuffer): {{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}} {
  const context: Context =  new Context("Deserializing imported query-type: {{name}}");
  const reader = new ReadDecoder(buffer, context);

  {{#return}}
  reader.context().push("{{name}}", "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "reading function output");
  {{#scalar}}
  const res: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = reader.read{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}();
  {{/scalar}}
  {{#array}}
  const res: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = reader.read{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}((reader: Read): {{#item}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/item}} => {
    {{> deserialize_array}}
  });
  {{/array}}
  {{#enum}}
  {{> deserialize_enum}}
  const res: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} =  value;
  {{/enum}}
  {{#object}}
  {{> deserialize_object}}
  const res: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} =  object;
  {{/object}}
  {{/return}}
  reader.context().pop();

  return res;
}
{{^last}}

{{/last}}
{{/methods}}
{{/methods.length}}
{{/__commonImport}}