/// NOTE: This is an auto-generated file.
///       All modifications will be overwritten.

import io.polywrap.core.Invoker
import io.polywrap.msgpack.msgPackDecode
import io.polywrap.msgpack.msgPackEncode
import io.polywrap.plugin.PluginMethod
import io.polywrap.plugin.PluginModule
import kotlinx.serialization.Serializable
import kotlinx.serialization.serializer
{{#moduleType}}
{{#methods}}

@Serializable
data class Args{{#toClassName}}{{name}}{{/toClassName}}(
    {{#arguments}}
    val {{#detectKeyword}}{{name}}{{/detectKeyword}}: {{#nullableDefault}}{{#toKotlin}}{{toGraphQLType}}{{/toKotlin}}{{/nullableDefault}},
    {{/arguments}}
)
{{/methods}}
{{/moduleType}}

@Suppress("UNUSED_PARAMETER", "FunctionName")
abstract class Module<TConfig>(config: TConfig) : PluginModule<TConfig>(config) {

  final override val methods: Map<String, PluginMethod> = mapOf(
  {{#moduleType}}
  {{#methods}}
      "{{name}}" to ::__{{name}},
  {{/methods}}
  {{/moduleType}}
  )

  {{#moduleType}}
  {{#methods}}
  abstract suspend fun {{#detectKeyword}}{{name}}{{/detectKeyword}}(
      args: Args{{#toClassName}}{{name}}{{/toClassName}},{{#env}}
      env: Env{{^required}}? = null{{/required}},{{/env}}
      invoker: Invoker
  ): {{#return}}{{#toKotlin}}{{toGraphQLType}}{{/toKotlin}}{{/return}}

  {{/methods}}
  {{/moduleType}}
  {{#moduleType}}
  {{#methods}}
  private suspend fun __{{name}}(
      encodedArgs: ByteArray?,
      encodedEnv: ByteArray?,
      invoker: Invoker
    ): ByteArray {
        val args: Args{{#toClassName}}{{name}}{{/toClassName}} = encodedArgs?.let {
            msgPackDecode(Args{{#toClassName}}{{name}}{{/toClassName}}.serializer(), it).getOrNull()
                ?: throw Exception("Failed to decode args in invocation to plugin method '{{name}}'")
        } ?: throw Exception("Missing args in invocation to plugin method '{{name}}'")
        {{#env}}
        val env: Env = encodedEnv?.let {
            msgPackDecode(Env.serializer(), it).getOrNull()
                ?: throw Exception("Failed to decode env in invocation to plugin method '{{name}}'")
        } ?: throw Exception("Missing env in invocation to plugin method '{{name}}'")
        {{/env}}
        val response = {{#detectKeyword}}{{name}}{{/detectKeyword}}(args, {{#env}}env, {{/env}}invoker)
        return msgPackEncode(serializer(), response)
  }
  {{^last}}

  {{/last}}
  {{/methods}}
  {{/moduleType}}
}
