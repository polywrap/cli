name: JS-CI

on: 
  push:
    branches:
      - origin
      - origin-dev
  pull_request:

jobs:
  Lint-and-Build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --nonInteractive --frozen-lockfile --prefer-offline

      - name: Lint
        run: yarn run lint:ci

      - name: Build
        run: yarn build

  Test-Core:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --nonInteractive --frozen-lockfile --prefer-offline

      - name: Build
        run: yarn build

      - name: Test
        run: yarn test:core

  Test-Plugins:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --nonInteractive --frozen-lockfile --prefer-offline

      - name: Build
        run: yarn build

      - name: Test
        run: yarn test:plugins

  Test-Client:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --nonInteractive --frozen-lockfile --prefer-offline

      - name: Build
        run: yarn build

      - name: Test
        run: yarn test:client

  Test-Cli:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - uses: actions/setup-go@v3
        with:
          go-version: '^1.13.1'

      - name: Install cue lang
        run: go install cuelang.org/go/cmd/cue@latest
      
      - name: Check if cue is installed
        run: cue version

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --nonInteractive --frozen-lockfile --prefer-offline

      - name: Build
        run: yarn build

      - name: Test
        run: yarn test:cli

# NOTE: Mac & Windows CI is not currently possible, since GitHub Actions does not
# use "Docker Enterprise". Docker Enterprise is required when running linux based
# containers, which is what we run within our toolchain for infra and build-images.
# In order to enable this, we can move to Circle CI, which supports Docker Enterprise.

#  JS-CI-Mac:
#    name: JS-CI-Mac
#    runs-on: macos-latest
#    timeout-minutes: 20
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Read .nvmrc
#        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
#        id: nvm
#
#      - name: Setup Node.js
#        uses: actions/setup-node@master
#        with:
#          node-version: '${{ steps.nvm.outputs.NVMRC }}'
#
#      - name: Check for cached node_modules
#        uses: actions/cache@v2
#        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
#        with:
#          path: |
#            node_modules
#            */*/node_modules
#          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
#
#      - name: Install dependencies
#        if: steps.cache-deps.outputs.cache-hit != 'true'
#        run: yarn install --nonInteractive --frozen-lockfile
#
#      - name: Lint
#        run: yarn run lint:ci
#
#      - name: Build
#        run: yarn build
#
#      - name: Test
#        run: yarn test:ci

#  JS-CI-Windows:
#    name: JS-CI-Windows
#    runs-on: windows-latest
#    timeout-minutes: 20
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Read .nvmrc
#        run: iex "echo '::set-output name=NVMRC::$(type .nvmrc)'"
#        id: nvm
#
#      - name: Setup Node.js
#        uses: actions/setup-node@master
#        with:
#          node-version: '${{ steps.nvm.outputs.NVMRC }}'
#
#      - name: Check for cached node_modules
#        uses: actions/cache@v2
#        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
#        with:
#          path: |
#            node_modules
#            */*/node_modules
#          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
#
#      - name: Install dependencies
#        if: steps.cache-deps.outputs.cache-hit != 'true'
#        run: yarn install --nonInteractive --frozen-lockfile
#
#      - name: Lint
#        run: yarn run lint:ci
#
#      - name: Build
#        run: yarn build
#
#      - name: Test
#        run: yarn test:ci
