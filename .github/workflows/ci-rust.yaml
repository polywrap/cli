name: CI-Rust

on: 
  push:
    branches:
      - origin
      - origin-dev
  pull_request:

jobs:
  Lint-and-Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      
      - name: Install Clippy
        run:  rustup component add clippy --toolchain nightly-x86_64-unknown-linux-gnu

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/
            ./target/
          key: cargo-${{ runner.os }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-${{ github.job }}

      - name: Build
        working-directory: ./packages/wasm/rs
        run: cargo build

      - name: List Artifacts
        working-directory: ./packages/wasm/rs
        run: ls target/debug

      - name: Test
        working-directory: ./packages/wasm/rs
        run: cargo test

      - name: Lint
        working-directory: ./packages/wasm/rs
        run: cargo clippy

      - name: Verify & Generate Documentation
        working-directory: ./packages/wasm/rs
        run: cargo doc --workspace --no-deps

  # Check-Changed-Folders:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     should-generate: ${{ env.should-generate }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Check changed files
  #       id: changed-files
  #       uses: tj-actions/changed-files@v35
  #       with:
  #         files: |
  #           packages/cli/*
  #           packages/schema/*
  #           packages/wasm/*
  #     - id: set-output
  #       run: echo "should-generate=${{steps.changed-files.outputs.any_changed}}" >> $GITHUB_ENV

  # Generate-Test-Wrappers:
  #   needs: Check-Changed-Folders
  #   if: ${{ needs.Check-Changed-Folders.outputs.should-generate == 'true' }}
  #   uses: ./.github/workflows/generate-modified-test-wrappers.yaml
  #   with:
  #     cli-path: /toolchain/packages/cli
  #     wasm-path: /toolchain/packages/wasm

  Check-PR-Body:
    if: contains(github.event.pull_request.body, 'generate wrappers from branch:')
    runs-on: ubuntu-latest
    outputs:
      should-generate: ${{ env.should-generate }}
      wrappers-branch: ${{ env.wrappers-branch }}
    steps:
      - name: Extract branch name
        id: extract-branch-name
        run: echo "::set-output name=wrappers-branch::$(echo ${GITHUB_EVENT_PULL_REQUEST_BODY#*generate wrappers from branch: })"
      - run: echo "should-generate='true'" >> $GITHUB_ENV
    else:
      - run: echo "should-generate='false'" >> $GITHUB_ENV

  Generate-Test-Wrappers:
    if: ${{ needs.Check-Changed-Folders.outputs.should-generate == 'true' }}
    uses: ./.github/workflows/generate-modified-test-wrappers.yaml
    with:
      cli-path: /toolchain/packages/cli
      wasm-path: /toolchain/packages/wasm
      harness-ref: ${{ steps.Check-PR-Body.outputs.wrappers-branch }}

  Test-Cases:
    needs: Generate-Test-Wrappers
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --nonInteractive --frozen-lockfile --prefer-offline

      - name: Build
        run: yarn build


      - name: Get updated wrappers
        if: ${{ env.should-generate == 'true'}}
        uses: actions/download-artifact@v2
        id: get-wrappers
        with:
          name: wrappers

      - name: If wrappers exists, update them
        if: ${{ env.should-generate == 'true' }}
        run: rm -rf packages/test-cases/wrappers |
          mv wrappers packages/test-cases/wrappers

      - name: Test
        run: yarn test:rust
        working-directory: ./packages/js/client

  Test-Cli:
    runs-on: ubuntu-latest
    needs: Generate-Test-Wrappers
    if: ${{ always() }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --nonInteractive --frozen-lockfile --prefer-offline

      - name: Build
        run: yarn build

      - name: Get updated wrappers
        if: ${{ env.should-generate == 'true'}}
        uses: actions/download-artifact@v2
        id: get-wrappers
        with:
          name: wrappers

      - name: If wrappers exists, update them
        if: ${{ env.should-generate == 'true' }}
        run: rm -rf packages/test-cases/wrappers |
          mv wrappers packages/test-cases/wrappers

      - name: Test
        run: yarn test:rust
        working-directory: ./packages/cli
